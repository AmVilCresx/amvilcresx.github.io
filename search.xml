<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用jsqlparser替换sql中的表名</title>
      <link href="/articles/%E4%BD%BF%E7%94%A8jsqlparser%E6%9B%BF%E6%8D%A2sql%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%90%8D/"/>
      <url>/articles/%E4%BD%BF%E7%94%A8jsqlparser%E6%9B%BF%E6%8D%A2sql%E4%B8%AD%E7%9A%84%E8%A1%A8%E5%90%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="✅前言"><a href="#✅前言" class="headerlink" title="✅前言"></a>✅前言</h2><p>​在某些场景中，我们可能需要在<code>Mybatis</code>拦截器中，根据某个条件，需要对原生SQL中的表名进行替换，从而适配不同的业务需求（比如，查询当前、当月等）。此时，就可以利用 jsqlparser 来优雅的进行替换。</p><p>先看一张select的示例（看不清图片可右键 “在新标签页中打开”）：</p><blockquote><p>基于新旧表名的映射关系：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; replacements = Map.of(</span><br><span class="line">               <span class="string">&quot;example_table&quot;</span>, <span class="string">&quot;新的_example_table&quot;</span>,</span><br><span class="line">               <span class="string">&quot;nested_example_table&quot;</span>, <span class="string">&quot;新的_nested_example_table&quot;</span>,</span><br><span class="line">               <span class="string">&quot;main_tab_2&quot;</span>, <span class="string">&quot;新的_main_tab_2&quot;</span>,</span><br><span class="line">               <span class="string">&quot;level3&quot;</span>, <span class="string">&quot;新的_level3&quot;</span>,</span><br><span class="line">               <span class="string">&quot;left_table&quot;</span>, <span class="string">&quot;新的_left_table&quot;</span>,</span><br><span class="line">               <span class="string">&quot;table_sec&quot;</span>, <span class="string">&quot;新的_table_sec&quot;</span></span><br><span class="line">       );</span><br></pre></td></tr></table></figure></blockquote><img src="https://s1.imagehub.cc/images/2025/03/13/0685d8412f7549be5c9df5a42d88c1fc.png" alt="image-20250313192802306" style="zoom:150%;"><p><img src="https://s1.imagehub.cc/images/2024/12/18/85bef43993768c42506f424073c5b1d2.png" alt="分割线"></p><h3 id="0-环境及依赖说明"><a href="#0-环境及依赖说明" class="headerlink" title="0. 环境及依赖说明"></a>0. 环境及依赖说明</h3><blockquote><ol><li><p>JDK 版本 ：jdk11</p></li><li><p><code>jsqlparser</code> 版本</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.jsqlparser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsqlparser<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="1-具体代码实现"><a href="#1-具体代码实现" class="headerlink" title="1. 具体代码实现"></a>1. 具体代码实现</h3><blockquote><p>继承 <code>TablesNamesFinder</code> 类，覆写其中【增、删、改、查】相关方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 替换Sql表名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TableNamesReplacer</span> <span class="keyword">extends</span> <span class="title class_">TablesNamesFinder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有涉及的表名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tables;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新旧表名映射 Key--原来的表名  Value--新表名</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; replaceNameMappings;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在执行Drop table 时，是否加上 &lt;code&gt; if exists &lt;/code&gt; 判断</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">boolean</span> ifExistsWhenDrop;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TableNamesReplacer</span><span class="params">(Map&lt;String, String&gt; replaceNameMappings)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(replaceNameMappings, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TableNamesReplacer</span><span class="params">(Map&lt;String, String&gt; replaceNameMappings, <span class="type">boolean</span> ifExistsWhenDrop)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.replaceNameMappings = replaceNameMappings;</span><br><span class="line">        <span class="built_in">this</span>.ifExistsWhenDrop = ifExistsWhenDrop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">generateNewSqlStr</span><span class="params">(Statement statement)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.getTables(statement);</span><br><span class="line">        <span class="keyword">return</span> statement.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Table tableName)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableWholeName</span> <span class="operator">=</span> tableName.getFullyQualifiedName();</span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">this</span>.tables.contains(tableWholeName)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.tables.add(tableWholeName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getTables</span><span class="params">(Statement statement)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.init();</span><br><span class="line">        statement.accept(<span class="built_in">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(<span class="built_in">this</span>.tables)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(<span class="built_in">this</span>.tables);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tables = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理 select 语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(PlainSelect plainSelect)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (plainSelect.getSelectItems() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (SelectItem&lt;?&gt; item : plainSelect.getSelectItems()) &#123;</span><br><span class="line">                item.accept(<span class="built_in">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">FromItem</span> <span class="variable">selectFromItem</span> <span class="operator">=</span> plainSelect.getFromItem();</span><br><span class="line">        <span class="keyword">if</span> (selectFromItem != <span class="literal">null</span>) &#123;</span><br><span class="line">            selectFromItem.accept(<span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (selectFromItem <span class="keyword">instanceof</span> Table) &#123;</span><br><span class="line">                <span class="type">Table</span> <span class="variable">tab</span> <span class="operator">=</span> (Table) selectFromItem;</span><br><span class="line">                <span class="keyword">if</span> (replaceNameMappings.containsKey(tab.getName())) &#123;</span><br><span class="line">                    tab.setName(replaceNameMappings.get(tab.getName()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (plainSelect.getJoins() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Join join : plainSelect.getJoins()) &#123;</span><br><span class="line">                <span class="type">Table</span> <span class="variable">fromItem</span> <span class="operator">=</span> (Table)join.getFromItem();</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> fromItem.getName();</span><br><span class="line">                fromItem.setName(replaceNameMappings.getOrDefault(name, name));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">Expression</span> <span class="variable">selectWhere</span> <span class="operator">=</span> plainSelect.getWhere();</span><br><span class="line">        <span class="keyword">if</span> (selectWhere != <span class="literal">null</span>) &#123;</span><br><span class="line">            selectWhere.accept(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (plainSelect.getOracleHierarchical() != <span class="literal">null</span>) &#123;</span><br><span class="line">            plainSelect.getOracleHierarchical().accept(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理 insert 语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Insert insert)</span> &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">table</span> <span class="operator">=</span> insert.getTable();</span><br><span class="line">        <span class="type">String</span> <span class="variable">tableName</span> <span class="operator">=</span> table.getName();</span><br><span class="line">        <span class="keyword">if</span> (replaceNameMappings.containsKey(tableName)) &#123;</span><br><span class="line">            table.setName(replaceNameMappings.get(tableName));</span><br><span class="line">        &#125;</span><br><span class="line">        insert.setTable(table);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理 update 语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Update update)</span> &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">updateTable</span> <span class="operator">=</span> update.getTable();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> updateTable.getName();</span><br><span class="line">        <span class="keyword">if</span> (replaceNameMappings.containsKey(name)) &#123;</span><br><span class="line">            updateTable.setName(replaceNameMappings.get(name));</span><br><span class="line">        &#125;</span><br><span class="line">        update.setTable(updateTable);</span><br><span class="line">        List&lt;Join&gt; joins = update.getStartJoins();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(joins)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Join join : joins) &#123;</span><br><span class="line">                <span class="type">Table</span> <span class="variable">fromItem</span> <span class="operator">=</span> (Table)join.getFromItem();</span><br><span class="line">                <span class="type">String</span> <span class="variable">joinName</span> <span class="operator">=</span> fromItem.getName();</span><br><span class="line">                <span class="keyword">if</span> (replaceNameMappings.containsKey(joinName)) &#123;</span><br><span class="line">                    fromItem.setName(replaceNameMappings.get(joinName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">where</span> <span class="operator">=</span> update.getWhere();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(where)) &#123;</span><br><span class="line">            where.accept(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">OracleHint</span> <span class="variable">oracleHint</span> <span class="operator">=</span> update.getOracleHint();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(oracleHint)) &#123;</span><br><span class="line">            oracleHint.accept(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理 delete 语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Delete delete)</span> &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">deleteTable</span> <span class="operator">=</span> delete.getTable();</span><br><span class="line">        <span class="type">String</span> <span class="variable">delTableName</span> <span class="operator">=</span> deleteTable.getName();</span><br><span class="line">        <span class="keyword">if</span> (replaceNameMappings.containsKey(delTableName)) &#123;</span><br><span class="line">            deleteTable.setName(replaceNameMappings.get(delTableName));</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Join&gt; joins = delete.getJoins();</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isNotEmpty(joins)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Join join : joins) &#123;</span><br><span class="line">                <span class="type">Table</span> <span class="variable">fromItem</span> <span class="operator">=</span> (Table)join.getFromItem();</span><br><span class="line">                <span class="type">String</span> <span class="variable">joinName</span> <span class="operator">=</span> fromItem.getName();</span><br><span class="line">                <span class="keyword">if</span> (replaceNameMappings.containsKey(joinName)) &#123;</span><br><span class="line">                    fromItem.setName(replaceNameMappings.get(joinName));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Expression</span> <span class="variable">where</span> <span class="operator">=</span> delete.getWhere();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(where)) &#123;</span><br><span class="line">            where.accept(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">OracleHint</span> <span class="variable">oracleHint</span> <span class="operator">=</span> delete.getOracleHint();</span><br><span class="line">        <span class="keyword">if</span> (Objects.nonNull(oracleHint)) &#123;</span><br><span class="line">            oracleHint.accept(<span class="built_in">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理 drop 语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Drop drop)</span> &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">droTable</span> <span class="operator">=</span> drop.getName();</span><br><span class="line">        <span class="type">String</span> <span class="variable">droTableName</span> <span class="operator">=</span> droTable.getName();</span><br><span class="line">        <span class="comment">// 为true，会自动加上 IF EXISTS, 如：</span></span><br><span class="line">        <span class="comment">// DROP table IF EXISTS example_table</span></span><br><span class="line">        drop.setIfExists(ifExistsWhenDrop);</span><br><span class="line">        droTable.setName(replaceNameMappings.getOrDefault(droTableName, droTableName));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 处理 select 语句</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">visit</span><span class="params">(Truncate truncate)</span> &#123;</span><br><span class="line">        <span class="type">Table</span> <span class="variable">truncateTable</span> <span class="operator">=</span> truncate.getTable();</span><br><span class="line">        <span class="type">String</span> <span class="variable">truncateTableName</span> <span class="operator">=</span> truncateTable.getName();</span><br><span class="line">        truncateTable.setName(replaceNameMappings.getOrDefault(truncateTableName, truncateTableName));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-测试代码"><a href="#2-测试代码" class="headerlink" title="2. 测试代码"></a>2. 测试代码</h3><ul><li><p>🔔<strong>主程序代码</strong></p><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SqlParserTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">originalSql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM example_table etAsn, main_tab_2  mt2 left join left_table lt, table_sec tsc WHERE column IN (SELECT other_column FROM nested_example_table xxx where id in (select id from level3 yyy))&quot;</span>;</span><br><span class="line">    <span class="comment">//          String originalSql = &quot;INSERT into example_table values (1,2,3)&quot;;</span></span><br><span class="line">    <span class="comment">//          String originalSql = &quot;INSERT into example_table select c1, c2 from table_sec&quot;; // 这种无法替换 table_sec</span></span><br><span class="line">    <span class="comment">//         String originalSql = &quot;update example_table  tt left join table_sec lxx set id=1 where id in (select id from nested_example_table xx)&quot;;</span></span><br><span class="line">    <span class="comment">//         String originalSql = &quot;delete from example_table a right join table_sec xx where id in (select id from nested_example_table)&quot;;</span></span><br><span class="line">    <span class="comment">//            String originalSql = &quot;drop table example_table&quot;;</span></span><br><span class="line">    <span class="comment">//         String originalSql = &quot;TRUNCATE  table example_table&quot;;</span></span><br><span class="line">        Map&lt;String, String&gt; replacements = Map.of(</span><br><span class="line">                <span class="string">&quot;example_table&quot;</span>, <span class="string">&quot;新的_example_table&quot;</span>,</span><br><span class="line">                <span class="string">&quot;nested_example_table&quot;</span>, <span class="string">&quot;新的_nested_example_table&quot;</span>,</span><br><span class="line">                <span class="string">&quot;main_tab_2&quot;</span>, <span class="string">&quot;新的_main_tab_2&quot;</span>,</span><br><span class="line">                <span class="string">&quot;level3&quot;</span>, <span class="string">&quot;新的_level3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;left_table&quot;</span>, <span class="string">&quot;新的_left_table&quot;</span>,</span><br><span class="line">                <span class="string">&quot;table_sec&quot;</span>, <span class="string">&quot;新的_table_sec&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="type">TableNamesReplacer</span> <span class="variable">nameReplacer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableNamesReplacer</span>(replacements);</span><br><span class="line">        System.out.println(<span class="string">&quot;原来的SQL是：&quot;</span>);</span><br><span class="line">        System.out.println(originalSql);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> CCJSqlParserUtil.parse(originalSql);</span><br><span class="line">            <span class="type">String</span> <span class="variable">newSqlStr</span> <span class="operator">=</span> nameReplacer.generateNewSqlStr(statement);</span><br><span class="line">            System.out.println(<span class="string">&quot;改变后的SQL是：&quot;</span>);</span><br><span class="line">            System.err.println(newSqlStr);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JSQLParserException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>🔍<strong>测试 <code>select</code> 语句</strong></p><blockquote><p>运行结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原来的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> example_table etAsn, main_tab_2  mt2 <span class="keyword">left</span> <span class="keyword">join</span> left_table lt, table_sec tsc <span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> other_column <span class="keyword">FROM</span> nested_example_table xxx <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> level3 yyy))</span><br><span class="line">改变后的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 新的_example_table etAsn, 新的_main_tab_2 mt2 <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 新的_left_table lt, 新的_table_sec tsc <span class="keyword">WHERE</span> <span class="keyword">column</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> other_column <span class="keyword">FROM</span> 新的_nested_example_table xxx <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> 新的_level3 yyy))</span><br></pre></td></tr></table></figure></blockquote></li><li><p>📝<strong>测试 <code>insert</code> 语句</strong></p><blockquote><p>运行结果1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原来的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> example_table <span class="keyword">values</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">改变后的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 新的_example_table <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>yun</p><p>运行结果2：</p><mark class="hl-label red">注意：</mark> 后面子查询的表<span style="color:red">不会</span>被替换<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原来的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">into</span> example_table <span class="keyword">select</span> c1, c2 <span class="keyword">from</span> table_sec</span><br><span class="line">改变后的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 新的_example_table <span class="keyword">SELECT</span> c1, c2 <span class="keyword">FROM</span> table_sec  <span class="comment">-- 这里注意，table_sec没有被替换</span></span><br></pre></td></tr></table></figure></blockquote></li><li><p>🔄<strong>测试 <code>update</code> 语句</strong></p><blockquote><p>运行结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原来的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">update</span> example_table  tt <span class="keyword">left</span> <span class="keyword">join</span> table_sec lxx <span class="keyword">set</span> id<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> nested_example_table xx)</span><br><span class="line">改变后的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">UPDATE</span> 新的_example_table tt <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> 新的_table_sec lxx <span class="keyword">SET</span> id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> 新的_nested_example_table xx)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>❌<strong>测试 <code>delete</code> 语句</strong></p><blockquote><p>运行结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原来的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> example_table a <span class="keyword">right</span> <span class="keyword">join</span> table_sec xx <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="keyword">select</span> id <span class="keyword">from</span> nested_example_table)</span><br><span class="line">改变后的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 新的_example_table a <span class="keyword">RIGHT</span> <span class="keyword">JOIN</span> 新的_table_sec xx <span class="keyword">WHERE</span> id <span class="keyword">IN</span> (<span class="keyword">SELECT</span> id <span class="keyword">FROM</span> 新的_nested_example_table)</span><br></pre></td></tr></table></figure></blockquote></li><li><p>🅾测试 <code>drop</code> 语句</p><blockquote><p>运行结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">原来的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> example_table</span><br><span class="line">改变后的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">table</span> IF <span class="keyword">EXISTS</span> 新的_example_table</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote></li><li><p>测试 <code>truncate</code> 语句</p><blockquote><p>运行结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">原来的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> example_table</span><br><span class="line">改变后的<span class="keyword">SQL</span>是：</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">table</span> IF <span class="keyword">EXISTS</span> 新的_example_table</span><br></pre></td></tr></table></figure></blockquote></li></ul><hr><mark class="hl-label orange">说明：</mark> 如有问题，请评论区留言，谢谢！]]></content>
      
      
      
        <tags>
            
            <tag> jsqlparser </tag>
            
            <tag> 表名称替换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码片段随机</title>
      <link href="/articles/Java%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E9%9A%8F%E6%9C%BA/"/>
      <url>/articles/Java%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%E9%9A%8F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="JAVA-SE系列"><a href="#JAVA-SE系列" class="headerlink" title=" JAVA SE系列"></a><span style="color: red"> JAVA SE系列</span></h2><h3 id="1-判断一个字符串是否是一个有效的罗马数字"><a href="#1-判断一个字符串是否是一个有效的罗马数字" class="headerlink" title="1. 判断一个字符串是否是一个有效的罗马数字"></a>1. <span style="color:#00c4b6">判断一个字符串是否是一个有效的罗马数字</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Pattern</span> <span class="variable">ROMAN</span> <span class="operator">=</span> Pattern.compile(<span class="string">&quot;^(?=.)M*(C[MD]|D?C&#123;0,3&#125;)(X[CL]|L?X&#123;0,3&#125;)(I[XV]|V?I&#123;0,3&#125;)$&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="2-判断一个数是否是2的整数次幂"><a href="#2-判断一个数是否是2的整数次幂" class="headerlink" title="2. 判断一个数是否是2的整数次幂"></a>2. <span style="color:#00c4b6">判断一个数是否是2的整数次幂</span></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPowerOfTwo</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (val &amp; -val) == val;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://s1.imagehub.cc/images/2024/12/18/85bef43993768c42506f424073c5b1d2.png" alt="分割线"></p><h2 id="Spring-生态"><a href="#Spring-生态" class="headerlink" title="Spring 生态"></a><span style="color: red">Spring 生态</span></h2><h3 id="1-使用代码方式，根据条件动态排除spring-boot的自动装配"><a href="#1-使用代码方式，根据条件动态排除spring-boot的自动装配" class="headerlink" title="1.  使用代码方式，根据条件动态排除spring boot的自动装配"></a>1.  <span style="color:#00c4b6">使用代码方式，根据条件动态排除spring boot的自动装配</span></h3><ul><li><p>实现 <code>EnvironmentPostProcessor</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExcludeEnvironmentPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">EnvironmentPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">LOGGER</span> <span class="operator">=</span> LoggerFactory.getLogger(ExcludeEnvironmentPostProcessor.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONDITION_KEY</span> <span class="operator">=</span> <span class="string">&quot;exclude.activemq&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SPRING_EXCLUDE_KEY</span> <span class="operator">=</span> <span class="string">&quot;spring.autoconfigure.exclude&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CUSTOM_EXCLUDES = &#123;<span class="string">&quot;org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postProcessEnvironment</span><span class="params">(ConfigurableEnvironment environment, SpringApplication application)</span> &#123;</span><br><span class="line">        <span class="comment">// 拿到条件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">condition</span> <span class="operator">=</span> environment.getProperty(CONDITION_KEY);</span><br><span class="line">        <span class="keyword">if</span> (!Boolean.parseBoolean(condition)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 排除掉 activemq 自动装配</span></span><br><span class="line">        <span class="type">Binder</span> <span class="variable">binder</span> <span class="operator">=</span> Binder.get(environment);</span><br><span class="line">        List&lt;String&gt; targetExcludes = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// org.springframework.boot.autoconfigure.AutoConfigurationImportSelector.getExcludeAutoConfigurationsProperty</span></span><br><span class="line">        List&lt;String&gt; oldExcludes = binder.bind(SPRING_EXCLUDE_KEY, String[].class).map(Arrays::asList).orElse(Collections.emptyList());</span><br><span class="line">        <span class="comment">// 原来排除的</span></span><br><span class="line">        targetExcludes.addAll(oldExcludes);</span><br><span class="line">        <span class="comment">// 新增需要排除的</span></span><br><span class="line">        targetExcludes.addAll(Arrays.asList(CUSTOM_EXCLUDES));</span><br><span class="line"></span><br><span class="line">        <span class="type">MutablePropertySources</span> <span class="variable">propertySources</span> <span class="operator">=</span> environment.getPropertySources();</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.put(SPRING_EXCLUDE_KEY, String.join(<span class="string">&quot;,&quot;</span>, targetExcludes));</span><br><span class="line">        propertySources.addFirst(<span class="keyword">new</span> <span class="title class_">PropertiesPropertySource</span>(<span class="string">&quot;customExcludeProperties&quot;</span>, prop));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>META-INF/spring.factories</code> 文件中进行配置</p><blockquote><p> <code>org.springframework.boot.env.EnvironmentPostProcessor=com.xxx.xxx.ExcludeEnvironmentPostProcessor</code></p></blockquote><img src="https://s1.imagehub.cc/images/2024/12/18/697165e19ac8ed755e1422a80ac3e115.png" alt="image-20241218164910621"></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 配置免密极简教程</title>
      <link href="/articles/Centos7%E9%85%8D%E7%BD%AE%E5%85%8D%E5%AF%86/"/>
      <url>/articles/Centos7%E9%85%8D%E7%BD%AE%E5%85%8D%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>🚀准备工作：</p><ul><li><p>安装OpenSSH（一般默认已经安装）:  </p><p><code>sudo yum install openssh-server openssh-clients</code></p></li></ul></blockquote><h3 id="1-生成SSH密钥对"><a href="#1-生成SSH密钥对" class="headerlink" title="1.生成SSH密钥对"></a>1.生成SSH密钥对</h3><p>如果你还没有生成 SSH 密钥对，可以在本地主机上生成一个。默认情况下，密钥会存储在 ~&#x2F;.ssh 目录下。</p><p>执行 <code>ssh-keygen -t rsa</code> 命令，一直回车即可。</p><h3 id="2-复制公钥到远程主机"><a href="#2-复制公钥到远程主机" class="headerlink" title="2.复制公钥到远程主机"></a>2.<strong>复制公钥到远程主机</strong></h3><p><code>ssh-copy-id user@remote_host </code>  </p><blockquote><p>例如：<code>ssh-copy-id root@192.168.0.170</code> </p><mark class="hl-label orange">注意</mark>：该步骤会让你输入远程主机的密码，即 <u>192.168.0.170</u> 的密码。</blockquote><h3 id="3-配置远程SSH服务器"><a href="#3-配置远程SSH服务器" class="headerlink" title="3. 配置远程SSH服务器"></a>3. <strong>配置远程SSH服务器</strong></h3><ul><li><p>确保远程主机上的 SSH 服务器允许基于密钥的身份验证。编辑远程主机（<u>上述例子中的192.168.0.170</u> ）的 <code>/etc/ssh/sshd_config</code> 文件，确保以下配置项正确设置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PubkeyAuthentication yes </span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys </span><br><span class="line">PasswordAuthentication no </span><br><span class="line">ChallengeResponseAuthentication no </span><br><span class="line">UsePAM no</span><br></pre></td></tr></table></figure></li><li><p>保存文件后，重启 SSH 服务以应用更改 </p><p><code>sudo systemctl restart sshd</code> </p><mark class="hl-label red">注意：</mark>：这里重启的是远程服务器，即上例中的 <u>192.168.0.170</u></li></ul><hr><h3 id="🌐测试一下"><a href="#🌐测试一下" class="headerlink" title="🌐测试一下"></a>🌐测试一下</h3><ul><li><p>在当前服务器使用ssh命令连接远程主机</p><blockquote><p>命令格式： ssh user@remote_host</p><p>如：<code>ssh root@192.168.0.170</code></p></blockquote></li></ul><p>​<span style="color:green">此时，应该直接登录到 192.168.0.170，无需再次输入密码 </span>!</p><hr><p>🌹</p>]]></content>
      
      
      
        <tags>
            
            <tag> Centos7 配置免密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EasyExcel模板填充时动态获取下拉框数据</title>
      <link href="/articles/EasyExcel%E6%A8%A1%E6%9D%BF%E5%A1%AB%E5%85%85%E6%97%B6%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E4%B8%8B%E6%8B%89%E6%A1%86%E6%95%B0%E6%8D%AE/"/>
      <url>/articles/EasyExcel%E6%A8%A1%E6%9D%BF%E5%A1%AB%E5%85%85%E6%97%B6%E5%8A%A8%E6%80%81%E8%8E%B7%E5%8F%96%E4%B8%8B%E6%8B%89%E6%A1%86%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><mark class="hl-label red">注意：</mark> 本文只适用于EasyExcel模板填充的场景</blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>​在Excel单元格中，可以利用<mark class="hl-label default">公式</mark>设置数据的约束，也可以理解成限制数据的来源范围。例如：</p><p><a href="https://www.imagehub.cc/image/beL954"><img src="https://s1.imagehub.cc/images/2024/05/24/7887c1c9e08a9f5618195047f1942f4f.png" alt="7887c1c9e08a9f5618195047f1942f4f.png"></a></p><p>​设置公式的方式：选中需要设置公式约束的列或者单元格，切换到【数据】栏，选择<mark class="hl-label default">有效性</mark>选项，然后在弹出框选择【序列】，最后在【来源】处填入公式：<code>=INDIRECT(&quot;选择项定义!C2:C&quot;&amp;COUNTA(选择项定义!C:C))</code></p><p><a href="https://www.imagehub.cc/image/beQrVv"><img src="https://s1.imagehub.cc/images/2024/05/24/7fd312e4df913c2d1a3d0634e8ad4c06.png" alt="7fd312e4df913c2d1a3d0634e8ad4c06.png"></a></p><p>​<a href="https://www.imagehub.cc/image/beQOxR"><img src="https://s1.imagehub.cc/images/2024/05/24/4f8efcb4b38070b37fa3ee868771ffc4.png" alt="4f8efcb4b38070b37fa3ee868771ffc4.png"></a></p><blockquote><p>这里对公式进行一下解释说明，可根据实际情况，做处调整：</p><p><a href="https://www.imagehub.cc/image/beQWab"><img src="https://s1.imagehub.cc/images/2024/05/24/915189f9f19b408408db80524f7206a8.png" alt="915189f9f19b408408db80524f7206a8.png"></a></p></blockquote><p>到这里，思路就很明确了，<u><strong>只需要预先在模板中设置好公式，再利用EasyExcel的列表填充必要的候选数据列，就可以实现了</strong></u>。</p><h2 id="程序示例及效果"><a href="#程序示例及效果" class="headerlink" title="程序示例及效果"></a>程序示例及效果</h2><ul><li><p>模板示例</p><p><a href="https://www.imagehub.cc/image/beQ8x7"><img src="https://s1.imagehub.cc/images/2024/05/24/1582fd08e2867fca569a403130ac63a8.png" alt="1582fd08e2867fca569a403130ac63a8.png"></a></p></li><li><p>代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WriteWithTemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        dynamicFillUp();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dynamicFillUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 最终输出的文件路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">outputFile</span> <span class="operator">=</span> <span class="string">&quot;D:/data/result.xlsx&quot;</span>;</span><br><span class="line">        <span class="comment">// 模板路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">templateFile</span> <span class="operator">=</span> <span class="string">&quot;D:/data/template.xlsx&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> (<span class="type">ExcelWriter</span> <span class="variable">excelWriter</span> <span class="operator">=</span> EasyExcel.write(outputFile).withTemplate(templateFile).build()) &#123;</span><br><span class="line">            <span class="comment">// 获取数据源所在的sheet页的写对象，下边从 0 开始</span></span><br><span class="line">            <span class="type">WriteSheet</span> <span class="variable">writeSheet</span> <span class="operator">=</span> EasyExcel.writerSheet(<span class="number">1</span>).build();</span><br><span class="line">            <span class="type">FillConfig</span> <span class="variable">fillConfig</span> <span class="operator">=</span>  FillConfig.builder().direction(WriteDirectionEnum.VERTICAL).build();</span><br><span class="line">            <span class="comment">// 拿到候选数据，</span></span><br><span class="line">            List&lt;CellDownDropValue&gt; cellDownDropValues = buildDownDropData();</span><br><span class="line">            <span class="comment">// 这里 【country】的key值， 要与excel模板中的列表的key对应上，如： &#123;country.value&#125;</span></span><br><span class="line">            excelWriter.fill(<span class="keyword">new</span> <span class="title class_">FillWrapper</span>(<span class="string">&quot;country&quot;</span>, cellDownDropValues), fillConfig, writeSheet);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 填充第一个sheet页的默认数据</span></span><br><span class="line">            writeSheet = EasyExcel.writerSheet(<span class="number">0</span>).build();</span><br><span class="line">            Map&lt;String, String&gt; defautValues = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            defautValues.put(<span class="string">&quot;defCountry&quot;</span>, <span class="string">&quot;中国&quot;</span>);</span><br><span class="line">            defautValues.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;尼古拉斯、赵四&quot;</span>);</span><br><span class="line">            excelWriter.fill(defautValues, writeSheet);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 实际业务，动态获取</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;CellDownDropValue&gt; <span class="title function_">buildDownDropData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CellDownDropValue</span> <span class="variable">china</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellDownDropValue</span>(<span class="string">&quot;中国&quot;</span>);</span><br><span class="line">        <span class="type">CellDownDropValue</span> <span class="variable">us</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellDownDropValue</span>(<span class="string">&quot;美国&quot;</span>);</span><br><span class="line">        <span class="type">CellDownDropValue</span> <span class="variable">uk</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellDownDropValue</span>(<span class="string">&quot;英国&quot;</span>);</span><br><span class="line">        <span class="type">CellDownDropValue</span> <span class="variable">jp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CellDownDropValue</span>(<span class="string">&quot;日本&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Arrays.asList(china, us ,uk, jp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最终渲染的效果</p><p><a href="https://www.imagehub.cc/image/beQKDe"><img src="https://s1.imagehub.cc/images/2024/05/24/98f8e4e7adb7e1ac1f071e7b3b62036a.png" alt="98f8e4e7adb7e1ac1f071e7b3b62036a.png"></a></p></li></ul><h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><p>​最初想的是能不能利用EasyExcel扩展Handler的方式来为单元格设置下拉框约束方式，试过了发现不行，不知道是不是姿势不对。然后是想直接在代码里设置excel公式来实现，网上查了很多资料，没有自己想要的效果，而且官方好像也<mark class="hl-label default">不推荐</mark>直接在程序中设置公式。最终选择了这种方式。代码不复杂也好理解，算是一种<mark class="hl-label orange">曲线救国</mark>的方式吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> EasyExcel </tag>
            
            <tag> 动态下拉框 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
